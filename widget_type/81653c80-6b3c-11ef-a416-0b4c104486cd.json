{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "cctv_widget",
    "name" : "cctv widget",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div\r\n    style=\"width:100%;height:100%;overflow: auto; padding: 5px\">\r\n    <div class=\"alarmsBlock\">\r\n        <div *ngFor=\"let item of stats\" class=\"rowBlock\">\r\n            <div class=\"row\">\r\n                <div style=\"width: 20%\">\r\n                    <span class=\"name\">{{item.name}}</span>\r\n                </div>\r\n                <div class=\"card\"\r\n                    (click)=\"click('On', item.name)\">\r\n                    <span class=\"header\"\r\n                        style=\"background-color:#FFC107\">POWER\r\n                        STATUS</span>\r\n                    <span\r\n                        class=\"footer\">{{item.powerStatus}}</span>\r\n                </div>\r\n                <div class=\"card\"\r\n                    (click)=\"click('Healthy', item.name)\">\r\n                    <span class=\"header\"\r\n                        style=\"background-color:#607D8B\">CAMERA\r\n                        STATUS</span>\r\n                    <span\r\n                        class=\"footer\">{{item.cameraStatus}}</span>\r\n                </div>\r\n                <div class=\"card\"\r\n                    (click)=\"click('Faulty', item.name)\">\r\n                    <span class=\"header\"\r\n                        style=\"background-color:#00ACC1\">CAMERA\r\n                        LINK STATUS</span>\r\n                    <span\r\n                        class=\"footer\">{{item.cameraLinkStatus}}</span>\r\n                </div>\r\n                <div class=\"card\"\r\n                    (click)=\"click('In active', item.name)\">\r\n                    <span class=\"header\"\r\n                        style=\"background-color:#FF5722\">HDD\r\n                        STATUS</span>\r\n                    <span\r\n                        class=\"footer\">{{item.hddStatus}}</span>\r\n                </div>\r\n\r\n                <div class=\"card\">\r\n                    <span class=\"header\"\r\n                        style=\"background-color:#4CAF50\">ACTIVE\r\n                        INTEGRATION</span>\r\n                    <span class=\"footer\">\r\n                        <a (click) = \"openDashboard('dvr')\">Go</a>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
      "templateCss" : ".headerBlock {\n    display: flex;\n    background-color: #fff;\n    border-radius: 6px;\n    border: 1px solid #E6E6E6;\n    justify-content: space-between;\n    color: #9FA6B4;\n}\n\n.rowBlock {\n    background-color: #fff;\n    border-radius: 6px;\n    padding: 10px;\n    margin-top: 10px;\n    display: flex;\n    width: 100%;\n    color: #9FA6B4;\n    justify-content: space-between;\n}\n\n.row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n}\n\n.name {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    color: #6A717D;\n    padding: 10px;\n    background-color: #F0F1F2;\n    border-radius: 20px;\n    width: 18%;\n}\n\n.card {\n    display: flex;\n    flex-direction: column;\n    width: 18%;\n    border-radius: 6px;\n    cursor: pointer;\n    margin: 1px 10px;\n}\n\n.header {\n    padding: 15px;\n    color: white;\n    border-radius: 6px 6px 0px 0px;\n    text-align: center;\n}\n\n.footer {\n    padding: 15px;\n    background-color: #F7F9F9;\n    border: 1px solid #CFD8DC;\n    color: #000000;\n    border-radius: 0px 0px 6px 6px;\n    font-size: 18px;\n    font-weight: 700;\n    text-align: center;\n}\n\nbody {\n    position: fixed;\n}",
      "controllerScript" : "self.onInit = function() {\r\n    self.ctx.$scope.stats = [{\r\n        name: \"CCTV STATUS\",\r\n        powerStatus: 'Off',\r\n        cameraStatus: 'NA',\r\n        cameraLinkStatus: 'NA',\r\n        hddStatus: 'NA'\r\n    }];\r\n\r\n    self.ctx.$scope.getObjectKeys = function() {\r\n        let array = [];\r\n        Object.keys(self.ctx.$scope.tenants[0])\r\n            .forEach(x => {\r\n                if (x !== 'id') {\r\n                    array.push(x);\r\n                }\r\n            });\r\n        return array;\r\n    };\r\n\r\n    self.ctx.$scope.click = function(item, type) {\r\n        let params = self.ctx.$scope.ctx\r\n            .stateController.getStateParams();\r\n        let actionEventDescriptors = self.ctx.$scope\r\n            .ctx.actionsApi.getActionDescriptors(\r\n                'elementClick');\r\n        let actionEvent;\r\n\r\n        if (actionEventDescriptors.length) {\r\n            actionEventDescriptors.forEach(\r\n                action => {\r\n                    if (action.name == type +\r\n                        ' ' + item) {\r\n                        actionEvent = action;\r\n                    }\r\n                });\r\n\r\n            setTimeout(() => {\r\n                self.ctx.$scope.ctx\r\n                    .actionsApi\r\n                    .handleWidgetAction(\r\n                        null, actionEvent,\r\n                        null, null);\r\n            }, 0);\r\n        }\r\n    };\r\n    \r\n        let stateController = self.ctx.$scope.ctx.stateController;\r\n    if(stateController){\r\n        self.ctx.$scope.navToState = function() {\r\n            stateController.navigatePrevState(2);\r\n        }\r\n    }\r\n    \r\n    self.ctx.$scope.openDashboard = function(actionName){\r\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\r\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\r\n        let actionEvent;\r\n            \r\n        if (actionEventDescriptors.length) {\t\r\n            actionEventDescriptors.forEach(action=>{\r\n                if(action.name == actionName){\r\n                    actionEvent = action;\r\n                }\r\n            });\r\n                \r\n            setTimeout(() => {\r\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, null, null);\t\r\n            }, 0);\t\r\n        }\r\n    }\r\n};\r\n\r\nself.onDataUpdated = function() {\r\n    if (self.ctx.datasources[0].type !== 'function') {\r\n        resetPropertiesToZero(self.ctx.$scope.stats);\r\n\r\n        self.ctx.data.forEach(x => {\r\n            if (x.dataKey.name ===\r\n                'cctvStatus') {\r\n                calculate('cctvStatus', x.data[\r\n                    0][1]);\r\n            }\r\n            if (x.dataKey.name ===\r\n                'cameraStatus') {\r\n                calculate('cameraStatus', x\r\n                    .data[0][1]);\r\n            }\r\n            if (x.dataKey.name ===\r\n                'cameraLinkStatus') {\r\n                calculate('cameraLinkStatus', x\r\n                    .data[0][1]);\r\n            }\r\n            if (x.dataKey.name ===\r\n                'hddStatus') {\r\n                calculate('hddStatus', x.data[0]\r\n                    [1]);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nfunction calculate(type, value) {\r\n    if (type === 'cctvStatus') {\r\n        if (value === 'On') {\r\n            self.ctx.$scope.stats[0].powerStatus = 'On';\r\n        } else {\r\n            self.ctx.$scope.stats[0].powerStatus = 'Off';\r\n            self.ctx.$scope.stats[0].cameraStatus = 'NA';\r\n            self.ctx.$scope.stats[0].cameraLinkStatus =\r\n                'NA';\r\n            self.ctx.$scope.stats[0].hddStatus = 'NA';\r\n            return; // Exit function early if powerStatus is Off\r\n        }\r\n    }\r\n\r\n    if (self.ctx.$scope.stats[0].powerStatus ===\r\n        'On') { // Check if powerStatus is On\r\n        if (type === 'cameraStatus') {\r\n            if (value === 'Healthy') {\r\n                self.ctx.$scope.stats[0].cameraStatus =\r\n                    'Healthy';\r\n            } else {\r\n                self.ctx.$scope.stats[0].cameraStatus =\r\n                    'Tampered';\r\n            }\r\n        }\r\n\r\n        if (type === 'cameraLinkStatus') {\r\n            if (value === 'Online') {\r\n                self.ctx.$scope.stats[0].cameraLinkStatus =\r\n                    'Online';\r\n            } else {\r\n                self.ctx.$scope.stats[0].cameraLinkStatus =\r\n                    'Offline';\r\n            }\r\n        }\r\n\r\n        if (type === 'hddStatus') {\r\n            if (value === 'Healthy') {\r\n                self.ctx.$scope.stats[0].hddStatus =\r\n                    'Healthy';\r\n            } else {\r\n                self.ctx.$scope.stats[0].hddStatus =\r\n                    'Error';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction resetPropertiesToZero(array) {\r\n    array.forEach(obj => {\r\n        for (let key in obj) {\r\n            if (key !== 'name') {\r\n                obj[key] = 0;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nself.onResize = function() {};\r\n\r\nself.actionSources = function() {\r\n    return {\r\n        'elementClick': {\r\n            name: 'widget-action.element-click',\r\n            multiple: true\r\n        }\r\n    };\r\n};\r\n\r\nself.onDestroy = function() {};",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"cctv widget\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "81653c80-6b3c-11ef-a416-0b4c104486cd"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}