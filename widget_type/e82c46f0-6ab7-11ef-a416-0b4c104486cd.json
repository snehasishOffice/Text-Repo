{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "uptime_widget",
    "name" : "uptime widget",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.1/echarts.min.js"
      } ],
      "templateHtml" : "\r\n<div class=\"container\">\r\n    <div class=\"header\">\r\n        <span class=\"title\">{{title}}</span>\r\n        <div class=\"select\" *ngIf=\"filterForm\">\r\n            <mat-form-field [formGroup]=\"filterForm\" class=\"dropdown-select\">\r\n                <mat-select [compareWith]=\"compareFn\" formControlName=\"selectedPeriod\" placeholder=\"Select period\" (selectionChange)=\"selectPeriod($event.value)\">\r\n                    <mat-option *ngFor=\"let item of periods\" [value]=\"item\">{{item.name}}</mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <div id=\"{{id}}\" style=\"height: 80%; width: 100%; margin: 0;\"></div>\r\n</div>\r\n",
      "templateCss" : ".container{\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 20%;\r\n}\r\n\r\n.title {\r\n    font-family: Roboto;\r\n    font-size: 18px;\r\n    color: #505050;\r\n    font-weight: 600;\r\n}\r\n\r\n.select {\r\n    width: 50%;\r\n}\r\n\r\n.dropdown-select {\r\n    background-color: #E0E5E6; \r\n    border-radius:20px; \r\n    color: #7E8088;\r\n    width: 100%;\r\n}\r\n\r\n.dropdown-select > .mat-mdc-text-field-wrapper {\r\n    border-radius: 20px;\r\n    background-color: #E0E5E6;\r\n}\r\n\r\n.mat-mdc-select-value-text {\r\n    color: #7E8088;\r\n}\r\n\r\n.mat-mdc-select-arrow svg {\r\n    color: #7E8088;\r\n}\r\n\r\n.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple {\r\n    display: none;\r\n}\r\n\r\n.mat-mdc-form-field-subscript-wrapper {\r\n    display: none;\r\n}\r\n\r\n.mat-mdc-select-placeholder {\r\n    color: #7E8088;    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
      "controllerScript" : "var option = {\r\n    grid: {\r\n        containLabel: true\r\n    },\r\n    series: [{\r\n        name: 'Total tenants',\r\n        type: 'pie',\r\n        radius: ['55%', '70%'],\r\n        startAngle: 242,\r\n        avoidLabelOverlap: false,\r\n        itemStyle: {\r\n            borderRadius: 30,\r\n            borderColor: '#fff',\r\n            borderWidth: 2\r\n        },\r\n        label: {\r\n            show: true,\r\n            position: 'center',\r\n            fontSize: 25,\r\n        },\r\n        data: [{\r\n                value: 90,\r\n                name: '90%',\r\n                itemStyle: {\r\n                    color: '#4a3aff',\r\n                }\r\n            },\r\n            {\r\n                value: 10,\r\n                name: '10%',\r\n                itemStyle: {\r\n                    color: '#f0e5fc',\r\n                },\r\n                label: {\r\n                    show: false\r\n                }\r\n            },\r\n            {\r\n                value: 0,\r\n                itemStyle: {\r\n                    color: 'none',\r\n                    decal: {\r\n                        symbol: 'none'\r\n                    }\r\n                },\r\n                label: {\r\n                    show: false\r\n                }\r\n            }\r\n        ]\r\n    }]\r\n};\r\n\r\nvar myChart, settings, utils, interval;\r\n\r\nself.onInit = function() {\r\n    utils = self.ctx.$scope.$injector.get(self.ctx\r\n        .servicesMap.get('utils'));\r\n    settings = utils.deepClone(self.ctx.settings) || {};\r\n\r\n    self.ctx.$scope.title = settings.title;\r\n\r\n    self.ctx.$scope.data = self.ctx.defaultSubscription\r\n        .data;\r\n    self.ctx.$scope.total = 0;\r\n    self.ctx.$scope.percentPaid = 60;\r\n    self.ctx.$scope.percentTrial = 30;\r\n    self.ctx.$scope.percentInt = 10;\r\n\r\n    let id = \"pieChart\" + self.ctx.widget.id;\r\n    self.ctx.$scope.id = id;\r\n\r\n    setTimeout(() => {\r\n        myChart = echarts.init(document\r\n            .getElementById(\r\n                `${self.ctx.$scope.id}`));\r\n        self.ctx.myChart = myChart;\r\n        option && myChart.setOption(option);\r\n        self.ctx.updateWidgetParams();\r\n    }, 100);\r\n\r\n    self.ctx.$scope.compareFn = function(c1, c2) {\r\n        return c1 && c2 ? c1.name === c2.name :\r\n            c1 === c2;\r\n    }\r\n\r\n    self.ctx.$scope.filterForm = self.ctx.$scope.fb\r\n        .group({\r\n            selectedPeriod: {\r\n                name: 'Weekly',\r\n                value: 'CURRENT_WEEK_ISO_SO_FAR'\r\n            },\r\n        });\r\n\r\n    self.ctx.$scope.periods = [{\r\n            name: 'Daily',\r\n            value: 'CURRENT_DAY_SO_FAR'\r\n        },\r\n        {\r\n            name: 'Weekly',\r\n            value: 'CURRENT_WEEK_ISO_SO_FAR'\r\n        },\r\n        {\r\n            name: 'Monthly',\r\n            value: 'CURRENT_MONTH_SO_FAR'\r\n        },\r\n        {\r\n            name: 'Quarterly',\r\n            value: 'QUARTERLY_SO_FAR'\r\n        },\r\n        {\r\n            name: 'Half Yearly',\r\n            value: 'HALF_YEAR_SO_FAR'\r\n        },\r\n        {\r\n            name: 'Yearly',\r\n            value: 'CURRENT_YEAR_SO_FAR'\r\n        }\r\n    ];\r\n\r\n    self.ctx.$scope.selectPeriod = function(event) {\r\n        let result = intervalTime(QuickTimeInterval[\r\n            event.value]);\r\n        self.ctx.timewindowFunctions\r\n            .onUpdateTimewindow(result[0], result[\r\n                1], 0);\r\n    }\r\n\r\n    self.ctx.$scope.selectPeriod({\r\n        name: 'Weekly',\r\n        value: 'CURRENT_WEEK_ISO_SO_FAR'\r\n    });\r\n};\r\n\r\n\r\nself.onDataUpdated = function() {\r\n    let sum = 0;\r\n    let length = self.ctx.data[0].data.length;\r\n\r\n    self.ctx.data[0].data.forEach(x => {\r\n        sum += x[1];\r\n    });\r\n\r\n    let result = calculatePercentage(sum, length);\r\n\r\n    let inputValue = parseInt(result);\r\n    let remainingValue = 100 - inputValue;\r\n\r\n    option.series[0].data[0].value = inputValue;\r\n    option.series[0].data[0].name = inputValue + '%';\r\n    option.series[0].data[1].value = remainingValue;\r\n    option.series[0].data[1].name = remainingValue +\r\n        '%';\r\n\r\n    let inputColor = '#A9A9A9';\r\n    if (inputValue >= 1 && inputValue <= 20) {\r\n        inputColor = '#FF4136';\r\n    } else if (inputValue >= 21 && inputValue <= 40) {\r\n        inputColor = '#FF851B';\r\n    } else if (inputValue >= 41 && inputValue <= 60) {\r\n        inputColor = '#FFDC00';\r\n    } else if (inputValue >= 61 && inputValue <= 80) {\r\n        inputColor = '#7FDBFF';\r\n    } else if (inputValue >= 81 && inputValue <= 100) {\r\n        inputColor = '#2ECC40';\r\n    } else {\r\n        inputColor = '#A9A9A9';\r\n    }\r\n\r\n    let remainingColor = '#D3D3D3';\r\n    option.series[0].data[0].itemStyle.color =\r\n        inputColor;\r\n    option.series[0].data[1].itemStyle.color =\r\n        remainingColor;\r\n\r\n    if (myChart) {\r\n        myChart.setOption(option);\r\n        self.ctx.detectChanges();\r\n    }\r\n};\r\n\r\nfunction calculatePercentage(value, total) {\r\n    let percentage = (value / total) * 100;\r\n\r\n    return percentage;\r\n}\r\n\r\nself.onResize = function() {\r\n    if (myChart) {\r\n        myChart.resize();\r\n    }\r\n};\r\n\r\nself.actionSources = function() {\r\n    return {\r\n        'elementClick': {\r\n            name: 'widget-action.elementclick',\r\n            multiple: true\r\n        }\r\n    };\r\n}\r\n\r\nself.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1,\r\n        singleEntity: false,\r\n        ignoreDataUpdateOnIntervalTick: true\r\n    };\r\n}\r\n\r\nself.onDestroy = function() {\r\n    if (myChart) {\r\n        myChart.clear();\r\n    }\r\n};\r\n\r\nconst QuickTimeInterval = {\r\n    CURRENT_DAY_SO_FAR: 'CURRENT_DAY_SO_FAR',\r\n    CURRENT_WEEK_ISO_SO_FAR: 'CURRENT_WEEK_ISO_SO_FAR',\r\n    CURRENT_MONTH_SO_FAR: 'CURRENT_MONTH_SO_FAR',\r\n    CURRENT_YEAR_SO_FAR: 'CURRENT_YEAR_SO_FAR'\r\n}\r\n\r\nfunction intervalTime(quickInterval) {\r\n    let timeperiod = [];\r\n\r\n    switch (quickInterval) {\r\n        case QuickTimeInterval.CURRENT_DAY_SO_FAR:\r\n            timeperiod[0] = moment().startOf('day')\r\n                .valueOf();\r\n            timeperiod[1] = Date.now();\r\n            break;\r\n        case QuickTimeInterval.CURRENT_WEEK_ISO_SO_FAR:\r\n            timeperiod[0] = moment().startOf('isoWeek')\r\n                .valueOf();\r\n            timeperiod[1] = Date.now();\r\n            break;\r\n        case QuickTimeInterval.CURRENT_MONTH_SO_FAR:\r\n            timeperiod[0] = moment().startOf('month')\r\n                .valueOf();\r\n            timeperiod[1] = Date.now();\r\n            break;\r\n        case QuickTimeInterval.QUARTERLY_SO_FAR:\r\n            const currentQuarter = Math.ceil(moment()\r\n                .month() / 3);\r\n            timeperiod[0] = moment().quarter(currentQuarter)\r\n                .startOf('quarter').valueOf();\r\n            timeperiod[1] = Date.now();\r\n            break;\r\n        case QuickTimeInterval.HALF_YEAR_SO_FAR:\r\n            const currentHalfYear = moment().month() < 6 ?\r\n                1 : 2;\r\n            timeperiod[0] = moment().startOf('year').add(\r\n                    currentHalfYear - 1, 'quarters')\r\n                .valueOf();\r\n            timeperiod[1] = Date.now();\r\n            break;\r\n        case QuickTimeInterval.CURRENT_YEAR_SO_FAR:\r\n            timeperiod[0] = moment().startOf('year')\r\n                .valueOf();\r\n            timeperiod[1] = Date.now();\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n    return timeperiod;\r\n}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"uptime widget\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "e82c46f0-6ab7-11ef-a416-0b4c104486cd"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}