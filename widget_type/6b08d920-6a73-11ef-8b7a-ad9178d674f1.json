{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "branch_header",
    "name" : "Branch Header",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "static",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "\n<div class=\"mainDiv\">\n    <div class=\"container\">\n    <ul class=\"menu\" style=\"marginLeft: 10px\">\n        <li class=\"menu__item\" (click)=\"navToState()\"><mat-icon class=\"icon\">arrow_back</mat-icon></li>\n    </ul>\n    <!--<button *ngIf=\"show\" class=\"comparison\" (click)=\"openDashboard()\">Device dashboard</button>-->\n</div>\n    <div style=\"height: 100%;width:80%; display: flex;align-items: center;\">\n        <span class=\"title\">Branch List</span>\n    </div>\n    <div style=\"height: 100%;width:20%;display: flex;align-items: center;justify-content: space-between\">\n        <div class=\"search-block\">\n            <mat-icon class=\"icon search\" matPrefix>search</mat-icon>\n            <input class=\"input\" type=\"text\" id=\"search-input\" (keyup)=\"applyFilter($event)\" placeholder=\"Search\">\n        </div>\n    </div>\n</div>",
      "templateCss" : ".mainDiv {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.title {\n    padding-left: 10px;\n    font-family: Roboto;\n    font-size: 16px;\n    font-weight: 600;\n    color: #505050;\n    display: flex;\n    align-items: center;\n}\n\n.search-block {\n    display: flex;\n    align-items: center;\n    background-color: white;\n    padding: 5px;\n    border: 1px solid #E6E6E6;\n    border-radius: 20px;\n    width: 100%;\n}\n\n.input {\n    border: none;\n    max-width: 150px;\n    font-size: 16px;\n    background-color: white;\n    height: 100%;\n    width: 80%;\n}\n\n.input:focus {\n    outline: none;\n}\n\n.input:active {\n    border: none;\n}\n\n.icon,\n.input {\n    color: #8E9097;\n}\n\n.icon.search {\n    display: flex;\n    align-items: center;\n    font-size: 16px;\n    width: 24px;\n}\n\n\n\n\n.container {\n    height: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.menu {\n    list-style-type: none;;\n    display: flex;\n    align-items: center;\n    padding: 0;\n}\n.icon {\n    height: 15px;\n    font-size: 15px;\n    margin-left: 5px;\n}\n.menu__item {\n    font-size: 13px;\n    color: #7E8088;\n    cursor: pointer;\n    display: flex;\n}\n.menu__item:hover {\n    text-decoration-line: underline;\n    color: #080B58;\n}\n\n.comparison {\n    background-color: var(--tb-primary-500);\n    color: #FEFEFE;\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 400;\n    text-align: center;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    border-radius: 20px;\n    height: 80%;\n    padding-left: 10px;\n    padding-right: 10px;\n    /*width: 10%;*/\n}",
      "controllerScript" : "let groupsAndDivisionsFilter;\n\nself.onInit = function() {\n    let aliasController;\n    if (self.ctx.dashboard.dashboardWidgets.parentDashboard) {\n        aliasController = self.ctx.dashboard.dashboardWidgets.parentDashboard.aliasController;\n    } else {\n        aliasController = self.ctx.dashboard.aliasController;\n    }\n    \n        let stateController = self.ctx.$scope.ctx.stateController;\n    \n    let currentState = stateController.stateValue;\n    \n    self.ctx.$scope.show = true;\n    \n    if(currentState == \"branchList\"){\n        self.ctx.$scope.show = true;\n    } else self.ctx.$scope.show = false;\n    \n    if(stateController){\n        self.ctx.$scope.navToState = function() {\n            stateController.navigatePrevState(0);\n        }\n            self.ctx.$scope.openDashboard = function(){\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\n        let actionEvent;\n            \n        if (actionEventDescriptors.length) {\t\n            actionEventDescriptors.forEach(action=>{\n                if(action.name == 'Open Dashboard'){\n                    actionEvent = action;\n                }\n            });\n                \n            setTimeout(() => {\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, null, null);\t\n            }, 0);\t\n        }\n    }\n    }\n\n    self.ctx.$scope.applyFilter = function(event) {\n        let filterValue = '';\n        if(event){\n            filterValue = event.target.value.trim();\n        } \n        \n        let myFilter;\n        if (aliasController.origFilters) {\n            for (let localFilter in aliasController.origFilters) {\n                if (aliasController.origFilters[localFilter]['filter'] == \"Branch Name Filter\") {\n                    myFilter = aliasController.origFilters[localFilter];\n                }\n            }\n        }\n        \n        myFilter.keyFilters.find(x=>x.key.key == \"name\").predicates[0].keyFilterPredicate.value.defaultValue = filterValue;\n        \n        myFilter = JSON.parse(JSON.stringify(myFilter));\n        aliasController.updateUserFilter(myFilter);\n    };\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-html-card-widget-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Branch Header\",\"dropShadow\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "6b08d920-6a73-11ef-8b7a-ad9178d674f1"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}