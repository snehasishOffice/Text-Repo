{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "user_table",
    "name" : "User Table",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div style=\"width:100%;height:100%;\">\r\n    <div class=\"headerBlock\">\r\n        <div class=\"switchBlock\">\r\n            <div class=\"switch active\" (click)=\"changeType('CCTV')\">CCTV</div>\r\n            <div class=\"switch\" (click)=\"changeType('BAS')\">BAS</div>\r\n            <div class=\"switch\" (click)=\"changeType('FAS')\">FAS</div>\r\n            <div class=\"switch\" (click)=\"changeType('Time lock')\">Time lock</div>\r\n            <div class=\"switch\" (click)=\"changeType('Access control')\">Access control</div>\r\n            <div class=\"switch\" (click)=\"changeType('IAS')\">IAS</div>\r\n            <div class=\"switch\" (click)=\"changeType('GATEWAY')\">GATEWAY</div>\r\n        </div>\r\n        <div style=\"display:flex;justify-content:space-between;width:100%;height:100%;align-items:center;\">\r\n            <span class=\"title\">Receive notifications: </span>\r\n            <div style=\"height: 100%;width:30%; display: flex;align-items: center;justify-content: end\">\r\n                <button class=\"comparison\" (click)=\"add()\">Add recipient </button>\r\n            </div> \r\n        </div>\r\n        <div class=\"header\">\r\n            <span style=\"width: 30%\">Name</span>\r\n            <span>Email</span>\r\n            <span>Phone</span>\r\n            <span style=\"width: 20%\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"alarmsBlock\" *ngIf=\"formGroup\">\r\n        <div *ngIf=\"selectedMode == 'CCTV'\" >\r\n            <div *ngFor=\"let item of cctv; let i = index\" class=\"rowBlock\">\r\n                <div class=\"row\" style=\"cursor: pointer\">\r\n                    <span class=\"default\" style=\"width: 30%\">{{item.name}}</span>\r\n                    <span class=\"default\">{{item.email}}</span>\r\n                    <span class=\"default\">{{item.phone}}</span>\r\n                    <button (click)=\"test(i)\" type=\"submit\">Test</button>\r\n                    <span class=\"actions\" style=\"width: 20%\">\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Edit\" (click)=\"edit(item)\">edit</mat-icon>\r\n                        </span>\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Delete\" (click)=\"delete(item, cctv)\">delete</mat-icon>\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"selectedMode == 'BAS'\">\r\n            <div *ngFor=\"let item of bas; let i = index\" class=\"rowBlock\">\r\n                <div class=\"row\" style=\"cursor: pointer\">\r\n                    <span class=\"default\" style=\"width: 30%\">{{item.name}}</span>\r\n                    <span class=\"default\">{{item.email}}</span>\r\n                    <span class=\"default\">{{item.phone}}</span>\r\n                    <button (click)=\"test1(i)\" type=\"submit\">Test</button>\r\n                    <span class=\"actions\" style=\"width: 20%\">\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Edit\" (click)=\"edit(item)\">edit</mat-icon>\r\n                        </span>\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Delete\" (click)=\"delete(item, bas)\">delete</mat-icon>\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"selectedMode == 'FAS'\">\r\n            <div *ngFor=\"let item of fas; let i = index\" class=\"rowBlock\">\r\n            <div class=\"row\" style=\"cursor: pointer\">\r\n                <span class=\"default\" style=\"width: 30%\">{{item.name}}</span>\r\n                <span class=\"default\">{{item.email}}</span>\r\n                <span class=\"default\">{{item.phone}}</span>\r\n                <button (click)=\"test2(i)\" type=\"submit\">Test</button>\r\n                <span class=\"actions\" style=\"width: 20%\">\r\n                    <span class=\"action\">\r\n                        <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Edit\" (click)=\"edit(item)\">edit</mat-icon>\r\n                    </span>\r\n                    <span class=\"action\">\r\n                        <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Delete\" (click)=\"delete(item, fas)\">delete</mat-icon>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div *ngIf=\"selectedMode == 'Time lock'\">\r\n            <div *ngFor=\"let item of tl; let i = index\" class=\"rowBlock\">\r\n            <div class=\"row\" style=\"cursor: pointer\">\r\n                <span class=\"default\" style=\"width: 30%\">{{item.name}}</span>\r\n                <span class=\"default\">{{item.email}}</span>\r\n                <span class=\"default\">{{item.phone}}</span>\r\n                <button (click)=\"test3(i)\" type=\"submit\">Test</button>\r\n                <span class=\"actions\" style=\"width: 20%\">\r\n                    <span class=\"action\">\r\n                        <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Edit\" (click)=\"edit(item)\">edit</mat-icon>\r\n                    </span>\r\n                    <span class=\"action\">\r\n                        <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Delete\" (click)=\"delete(item, tl)\">delete</mat-icon>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div *ngIf=\"selectedMode == 'Access control'\">\r\n            <div *ngFor=\"let item of ac; let i = index\" class=\"rowBlock\">\r\n                <div class=\"row\" style=\"cursor: pointer\">\r\n                    <span class=\"default\" style=\"width: 30%\">{{item.name}}</span>\r\n                    <span class=\"default\">{{item.email}}</span>\r\n                    <span class=\"default\">{{item.phone}}</span>\r\n                    <button (click)=\"test4(i)\" type=\"submit\">Test</button>\r\n                    <span class=\"actions\" style=\"width: 20%\">\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Edit\" (click)=\"edit(item)\">edit</mat-icon>\r\n                        </span>\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Delete\" (click)=\"delete(item, ac)\">delete</mat-icon>\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"selectedMode == 'IAS'\">\r\n            <div *ngFor=\"let item of ias; let i = index\" class=\"rowBlock\">\r\n                <div class=\"row\" style=\"cursor: pointer\">\r\n                    <span class=\"default\" style=\"width: 30%\">{{item.name}}</span>\r\n                    <span class=\"default\">{{item.email}}</span>\r\n                    <span class=\"default\">{{item.phone}}</span>\r\n                    <button (click)=\"test5(i)\" type=\"submit\">Test</button>\r\n                    <span class=\"actions\" style=\"width: 20%\">\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Edit\" (click)=\"edit(item)\">edit</mat-icon>\r\n                        </span>\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Delete\" (click)=\"delete(item, ias)\">delete</mat-icon>\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div *ngIf=\"selectedMode == 'GATEWAY'\">\r\n            <div *ngFor=\"let item of gateway; let i = index\" class=\"rowBlock\">\r\n                <div class=\"row\" style=\"cursor: pointer\">\r\n                    <span class=\"default\" style=\"width: 30%\">{{item.name}}</span>\r\n                    <span class=\"default\">{{item.email}}</span>\r\n                    <span class=\"default\">{{item.phone}}</span>\r\n                    <button (click)=\"test6(i)\" type=\"submit\">Test</button>\r\n                    <span class=\"actions\" style=\"width: 20%\">\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Edit\" (click)=\"edit(item)\">edit</mat-icon>\r\n                        </span>\r\n                        <span class=\"action\">\r\n                            <mat-icon [matTooltipPosition]=\"'above'\" matTooltip=\"Delete\" (click)=\"delete(item, gateway)\">delete</mat-icon>\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!--<div class=\"message\" [formGroup]=\"formGroup\">-->\r\n        <!--    <mat-form-field class=\"field\" appearance=\"outline\">-->\r\n        <!--        <mat-label>SMS text</mat-label>-->\r\n        <!--        <textarea matInput-->\r\n        <!--            cdkTextareaAutosize-->\r\n        <!--            #autosize=\"cdkTextareaAutosize\"-->\r\n        <!--            formControlName=\"text_sms\"-->\r\n        <!--            cdkAutosizeMinRows=\"1\"-->\r\n        <!--            cdkAutosizeMaxRows=\"5\"></textarea>-->\r\n        <!--    </mat-form-field> -->\r\n        <!--    <mat-form-field class=\"field\" appearance=\"outline\">-->\r\n        <!--        <mat-label>Call text</mat-label>-->\r\n        <!--        <textarea matInput-->\r\n        <!--            cdkTextareaAutosize-->\r\n        <!--            formControlName=\"text_call\"-->\r\n        <!--            #autosize=\"cdkTextareaAutosize\"-->\r\n        <!--            cdkAutosizeMinRows=\"1\"-->\r\n        <!--            cdkAutosizeMaxRows=\"5\"></textarea>-->\r\n        <!--    </mat-form-field>-->\r\n        <!--</div>-->\r\n        <button (click)=\"save1()\" mat-button mat-raised-button color=\"primary\" style=\"position: absolute; bottom: 0; right: 0;\" type=\"submit\">Save</button>\r\n    </div>\r\n</div>\r\n",
      "templateCss" : ".alarmsBlock {\n    overflow: auto;\n    height: 70%;\n}\n\n.headerBlock {\n    display: flex;\n    flex-direction: column;\n    background-color: #FFFFFF;\n    padding: 10px;\n    padding-left: 5px;\n    padding-top: 0px;\n    height: 130px;\n    justify-content: flex-end;\n    border-bottom: 1px solid #454b7433; \n}\n\n.title {\n    font-family: Roboto;\n    font-size: 16px;\n    font-weight: 600;\n    color: #505050;\n}\n\n.header {\n    margin-top: 10px;\n    display: flex;\n    justify-content: space-between;\n}\n\n.clear {\n    cursor: pointer;\n}\n\n.header span {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    color: rgba(0, 0, 0, 0.54);\n    width: 20%;\n}\n\n.rowBlock {\n    background-color: #FFFFFF;\n    padding: 5px;\n    border-bottom: 1px solid #454b7433;\n}\n\n.rowBlock:hover {\n    background-color: #454B7414;\n}\n\n.row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.row span {\n    width: 20%;\n    word-break: break-all;\n    padding-left: 0px;\n}\n\n.default {\n    font-family: Roboto;\n    font-size: 16px;\n    font-weight: 400;\n    color: #000000DE;\n    padding: 7px;\n}\n\n.actions {\n    display: flex;\n    justify-content: end;\n}\n\n.search-block {\n    display: flex;\n    align-items: center;\n    height: 100%;\n    border: 1px solid #e3e3e3;\n    border-radius: 20px;\n    margin-right: 5px;\n    width: 50%;\n}\n\n.input {\n    border: none;\n    font-size: 16px;\n    height: 100%;\n    width: 80%;\n    padding-left: 10px;\n    background: transparent;\n}\n\n.input:focus {\n    outline: none;\n}\n\n.input:active {\n    border: none;\n}\n\n.icon,\n.input {\n    color: #8E9097;\n}\n\n.icon.search {\n    display: flex;\n    align-items: center;\n    font-size: 16px;\n    width: 24px;\n    padding-left: 10px;\n} \n\n.comparison {\n    color: white;\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 400;\n    text-align: center;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    border-radius: 20px;\n    height: 100%;\n    width: 50%;\n    background-color: var(--tb-primary-500);\n}\n\n.action {\n    width: 40px;\n    height: 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.action mat-icon {\n    color: rgba(0, 0, 0, 0.54);\n    cursor: pointer;\n    /*color:#99A3AC;*/\n}\n\n.action:hover {\n    border-radius: 50%;\n    background-color: #e6e6e6;\n}\n\n.switchBlock {\n    width: 100%;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.switch {\n    text-align: center;\n    color: #B1BCB3;    \n    padding: 5px;\n    font-family: Roboto;\n    font-size: 16px;\n    font-weight: 400;\n    cursor: pointer;\n    width: 20%;\n}\n\n.active {\n    background-color: #DDE0E2;\n    color: #05224E;\n    border-radius: 20px;\n    font-family: Roboto;\n    font-size: 16px;\n    font-weight: 600;\n}\n\n.message {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n}\n\n.field {\n    padding: 10px 0;\n    width: 49%;\n}\n\n\n#callSubmitButton {\n    background-color: #007BFF; /* Blue background */\n    color: white; /* White text */\n    padding: 10px 20px; /* Padding */\n    font-size: 14px; /* Font size */\n    border: none; /* Remove borders */\n    border-radius: 4px; /* Rounded corners */\n    cursor: pointer; /* Pointer/hand icon on hover */\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    transition: background-color 0.3s ease, box-shadow 0.3s ease; /* Transition for background and shadow */\n}\n\n/* Change background color on hover */\n#callSubmitButton:hover {\n    background-color: #0056b3;\n}\n\n/* Disabled button styles */\n#callSubmitButton:disabled {\n    background-color: #ddd; /* Grey background */\n    color: #777; /* Grey text */\n    cursor: not-allowed; /* Not-allowed cursor */\n}\n\n",
      "controllerScript" : "self.onInit = function() {\r\n    dialogs = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('dialogs'));    \r\n    attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\r\n    utils = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('utils'));\r\n    settings = utils.deepClone(self.ctx.settings) || {};\r\n    \r\n    self.ctx.$scope.formGroup = self.ctx.$scope.fb.group({\r\n        text_sms: [null],\r\n        text_call: [null]\r\n    });\r\n\r\n    self.ctx.$scope.entityId = self.ctx.datasources[0].entityId;\r\n    self.ctx.$scope.noData = false;\r\n    self.ctx.$scope.selectedMode = \"CCTV\";\r\n    \r\n    self.ctx.$scope.cctv = [\r\n        {\r\n            email: '1@gmail.com',\r\n            name: \"admin\",\r\n            phone: \"095-169-54-22\"\r\n        }, {\r\n            email: '2@gmail.com',\r\n            name: \"user\",\r\n            phone: '095-169-54-22',\r\n        }\r\n    ];\r\n    \r\n    self.ctx.$scope.bas = [\r\n        {\r\n            email: '3@gmail.com',\r\n            name: \"admin\",\r\n            phone: \"095-169-54-22\"\r\n        }, {\r\n            email: '4@gmail.com',\r\n            name: \"user\",\r\n            phone: '095-169-54-22',\r\n        }\r\n    ];\r\n    \r\n    self.ctx.$scope.fas = [\r\n        {\r\n            email: '5@gmail.com',\r\n            name: \"admin\",\r\n            phone: \"095-169-54-22\"\r\n        }, {\r\n            email: '6@gmail.com',\r\n            name: \"user\",\r\n            phone: '095-169-54-22',\r\n        }\r\n    ];\r\n    \r\n    self.ctx.$scope.tl = [\r\n        {\r\n            email: '7@gmail.com',\r\n            name: \"admin\",\r\n            phone: \"095-169-54-22\"\r\n        }, {\r\n            email: '8@gmail.com',\r\n            name: \"user\",\r\n            phone: '095-169-54-22',\r\n        }\r\n    ];\r\n    \r\n    self.ctx.$scope.ac = [\r\n        {\r\n            email: '9@gmail.com',\r\n            name: \"admin\",\r\n            phone: \"095-169-54-22\"\r\n        }, {\r\n            email: '10@gmail.com',\r\n            name: \"user\",\r\n            phone: '095-169-54-22',\r\n        }\r\n    ];\r\n    \r\n    self.ctx.$scope.ias = [\r\n        {\r\n            email: '11@gmail.com',\r\n            name: \"admin\",\r\n            phone: \"095-169-54-22\"\r\n        }, {\r\n            email: '12@gmail.com',\r\n            name: \"user\",\r\n            phone: '095-169-54-22',\r\n        }\r\n    ];\r\n    \r\n    self.ctx.$scope.gateway = [\r\n        {\r\n            email: '13@gmail.com',\r\n            name: \"admin\",\r\n            phone: \"095-169-54-22\"\r\n        }, {\r\n            email: '14@gmail.com',\r\n            name: \"user\",\r\n            phone: '095-169-54-22',\r\n        }\r\n    ];\r\n    \r\n    self.ctx.$scope.edit = function(item){\r\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\r\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\r\n        let actionEvent;\r\n            \r\n        if (actionEventDescriptors.length) {\t\r\n            actionEventDescriptors.forEach(action=>{\r\n                if(action.name == \"edit\"){\r\n                    actionEvent = action;\r\n                }\r\n            });\r\n                \r\n            setTimeout(() => {\r\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(params, actionEvent, item, null);\t\r\n            }, 0);\t\r\n        }\r\n    };\r\n    \r\n    self.ctx.$scope.delete = function(item, array){\r\n        let title = 'Delete user';\r\n        let content = 'Are you sure want to delete user?';\r\n        dialogs.confirm(title, content, 'Cancel', 'Change').subscribe(\r\n            function(result) {\r\n                if (result) {\r\n                    let indexToDelete = array.findIndex(obj => obj === item);\r\n                    \r\n                    if (indexToDelete !== -1) {\r\n                        array.splice(indexToDelete, 1);\r\n                    }\r\n                    self.ctx.detectChanges();\r\n                }\r\n            });\r\n    };\r\n    \r\n    self.ctx.$scope.add = function(){\r\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\r\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\r\n        let actionEvent;\r\n            \r\n        if (actionEventDescriptors.length) {\t\r\n            actionEventDescriptors.forEach(action=>{\r\n                if(action.name == \"add\"){\r\n                    actionEvent = action;\r\n                }\r\n            });\r\n                \r\n            setTimeout(() => {\r\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(params, actionEvent, self.ctx.datasources[0].entityName, null);\t\r\n            }, 0);\t\r\n        }\r\n    };\r\n\r\n    // Updated save1 function to also call test1\r\n    self.ctx.$scope.save1 = function(){\r\n        // const authHeader = localStorage.getItem(\"jwt_token\");\r\n\r\n        // Create the object with the required data\r\n        let obj = {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',  // Add the specific customerId here\r\n            cctv: self.ctx.$scope.cctv, \r\n            bas: self.ctx.$scope.bas, \r\n            fas: self.ctx.$scope.fas, \r\n            timeLock: self.ctx.$scope.tl, \r\n            accessControl: self.ctx.$scope.ac,\r\n            ias: self.ctx.$scope.ias,\r\n            gateway: self.ctx.$scope.gateway,\r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n        // Save the data under 'notificationUsers'\r\n        attributeService.saveEntityAttributes(self.ctx.datasources[0].entity.id, 'SERVER_SCOPE', [{key: 'notificationUsers', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n\r\n        // Also call the test1 function to save the data under 'notificationSave'\r\n        self.ctx.$scope.test(obj);\r\n        self.ctx.$scope.test1(obj);\r\n        self.ctx.$scope.test2(obj);\r\n        self.ctx.$scope.test3(obj);\r\n        self.ctx.$scope.test4(obj);\r\n        self.ctx.$scope.test5(obj);\r\n        self.ctx.$scope.test6(obj);\r\n    };\r\n    \r\n   \r\n\r\n    // Updated test1 function to accept dataObj and use it\r\n    self.ctx.$scope.test = function(i,dataObj ){\r\n        \r\n        let selectedItem = self.ctx.$scope.cctv[i];\r\n        // If dataObj is passed, use it, otherwise create the data object\r\n        //console.log('cctv array:', self.ctx.$scope.cctv);\r\n        //console.log('Selected index:', i);\r\n        let obj = dataObj || {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',  // Add the specific customerId here\r\n            cctv: [selectedItem], \r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n\r\n        // Save the data under 'notificationSave'\r\n        // attributeService.saveEntityAttributes(self.ctx.datasources[0].entity.id, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n        //     self.ctx.updateAliases();\r\n        // });\r\n        \r\n        let customersaveID = 'bd83c590-419b-11ee-af4f-b7320cf3b43d';\r\n        let saveTYPE = 'CUSTOMER';\r\n        attributeService.saveEntityAttributes({entityType:saveTYPE,id: customersaveID}, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n    };\r\n    self.ctx.$scope.test1 = function(i,dataObj ){\r\n        \r\n        let selectedItem = self.ctx.$scope.bas[i];\r\n        // If dataObj is passed, use it, otherwise create the data object\r\n        //console.log('cctv array:', self.ctx.$scope.cctv);\r\n        //console.log('Selected index:', i);\r\n        let obj = dataObj || {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',  // Add the specific customerId here\r\n            bas:[selectedItem] , \r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n\r\n        // Save the data under 'notificationSave'\r\n        // attributeService.saveEntityAttributes(self.ctx.datasources[0].entity.id, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n        //     self.ctx.updateAliases();\r\n        // });\r\n        \r\n        let customersaveID = 'bd83c590-419b-11ee-af4f-b7320cf3b43d';\r\n        let saveTYPE = 'CUSTOMER';\r\n        attributeService.saveEntityAttributes({entityType:saveTYPE,id: customersaveID}, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n    };\r\n    self.ctx.$scope.test2 = function(i,dataObj ){\r\n        \r\n        let selectedItem = self.ctx.$scope.fas[i];\r\n        // If dataObj is passed, use it, otherwise create the data object\r\n        //console.log('cctv array:', self.ctx.$scope.cctv);\r\n        //console.log('Selected index:', i);\r\n        let obj = dataObj || {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',  // Add the specific customerId here\r\n            fas:[selectedItem] , \r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n\r\n        // Save the data under 'notificationSave'\r\n        // attributeService.saveEntityAttributes(self.ctx.datasources[0].entity.id, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n        //     self.ctx.updateAliases();\r\n        // });\r\n        \r\n        let customersaveID = 'bd83c590-419b-11ee-af4f-b7320cf3b43d';\r\n        let saveTYPE = 'CUSTOMER';\r\n        attributeService.saveEntityAttributes({entityType:saveTYPE,id: customersaveID}, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n    };\r\n    \r\n    self.ctx.$scope.test3 = function(i, dataObj){\r\n        let selectedItem = self.ctx.$scope.tl[i];\r\n        \r\n        let obj = dataObj || {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',\r\n            tl: [selectedItem],\r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n        let customersaveID = 'bd83c590-419b-11ee-af4f-b7320cf3b43d';\r\n        let saveTYPE = 'CUSTOMER';\r\n        attributeService.saveEntityAttributes({entityType:saveTYPE,id: customersaveID}, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n    };\r\n    self.ctx.$scope.test4 = function(i, dataObj){\r\n        let selectedItem = self.ctx.$scope.ac[i];\r\n        \r\n        let obj = dataObj || {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',\r\n            ac: [selectedItem],\r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n        let customersaveID = \"bd83c590-419b-11ee-af4f-b7320cf3b43d\";\r\n        let saveTYPE = 'CUSTOMER';\r\n        attributeService.saveEntityAttributes({entityType:saveTYPE,id: customersaveID}, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n    };\r\n    self.ctx.$scope.test5 = function(i, dataObj){\r\n        let selectedItem = self.ctx.$scope.ias[i];\r\n        \r\n        let obj = dataObj || {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',\r\n            ias: [selectedItem],\r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n        let customersaveID = \"bd83c590-419b-11ee-af4f-b7320cf3b43d\";\r\n        let saveTYPE = 'CUSTOMER';\r\n        attributeService.saveEntityAttributes({entityType:saveTYPE,id: customersaveID}, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n    };\r\n    \r\n    self.ctx.$scope.test6 = function(i, dataObj){\r\n        let selectedItem = self.ctx.$scope.gateway[i];\r\n        \r\n        let obj = dataObj || {\r\n            customerId: 'bd83c590-419b-11ee-af4f-b7320cf3b43d',\r\n            gateway: [selectedItem],\r\n            text_sms: self.ctx.$scope.formGroup.value.text_sms,\r\n            text_call: self.ctx.$scope.formGroup.value.text_call\r\n        };\r\n        \r\n        let customersaveID = \"bd83c590-419b-11ee-af4f-b7320cf3b43d\";\r\n        let saveTYPE = 'CUSTOMER';\r\n        attributeService.saveEntityAttributes({entityType:saveTYPE,id: customersaveID}, 'SERVER_SCOPE', [{key: 'notificationSave', value: obj}]).subscribe(()=>{\r\n            self.ctx.updateAliases();\r\n        });\r\n    };\r\n    \r\n    self.ctx.$scope.changeType = function(type){\r\n        self.ctx.$scope.selectedMode = type;\r\n        \r\n        let activeMenu = self.ctx.$container.find('.active');\r\n        for(let i=0; i<activeMenu.length; i++){\r\n            activeMenu[i].classList.remove('active');\r\n        }\r\n        if(event.target.tagName.toLowerCase()!='div'){\r\n            element = event.target.parentElement;\r\n        }else{\r\n            element = event.target;\r\n        }\r\n        \r\n        element.classList.add('active');\r\n        \r\n        if(type == \"CCTV\"){\r\n            if(self.ctx.$scope.cctv.length > 0){\r\n                self.ctx.$scope.noData = false;\r\n            } else self.ctx.$scope.noData = true;\r\n        }\r\n        if(type == \"BAS\"){\r\n            if(self.ctx.$scope.bas.length > 0){\r\n                self.ctx.$scope.noData = false;\r\n            } else self.ctx.$scope.noData = true;\r\n        }\r\n        if(type == \"FAS\"){\r\n            if(self.ctx.$scope.fas.length > 0){\r\n                self.ctx.$scope.noData = false;\r\n            } else self.ctx.$scope.noData = true;\r\n        }\r\n        if(type == \"Time lock\"){\r\n            if(self.ctx.$scope.tl.length > 0){\r\n                self.ctx.$scope.noData = false;\r\n            } else self.ctx.$scope.noData = true;\r\n        }\r\n        if(type == \"Access control\"){\r\n            if(self.ctx.$scope.ac.length > 0){\r\n                self.ctx.$scope.noData = false;\r\n            } else self.ctx.$scope.noData = true;\r\n        }\r\n        if(type == \"IAS\"){\r\n            if(self.ctx.$scope.ias.length > 0){\r\n                self.ctx.$scope.noData = false;\r\n            } else self.ctx.$scope.noData = true;\r\n        }\r\n        if(type == \"GATEWAY\"){\r\n            if(self.ctx.$scope.gateway.length > 0){\r\n                self.ctx.$scope.noData = false;\r\n            } else self.ctx.$scope.noData = true;\r\n        }\r\n    }\r\n}\r\n\r\nself.onDataUpdated = function() {\r\n    self.ctx.$scope.cctv = [];\r\n    self.ctx.$scope.bas = [];\r\n    self.ctx.$scope.fas = [];\r\n    self.ctx.$scope.tl = [];\r\n    self.ctx.$scope.ac = [];\r\n    self.ctx.$scope.ias = [];\r\n    self.ctx.$scope.gateway = [];\r\n    \r\n    if(self.ctx.data[0].data[0]){\r\n        if(self.ctx.data[0].data[0][1]){\r\n            if(JSON.parse(self.ctx.data[0].data[0][1])){\r\n                let obj = JSON.parse(self.ctx.data[0].data[0][1]);\r\n                self.ctx.$scope.noData = false;\r\n                self.ctx.$scope.cctv = obj[\"cctv\"];\r\n                self.ctx.$scope.bas = obj[\"bas\"];\r\n                self.ctx.$scope.fas = obj[\"fas\"];\r\n                self.ctx.$scope.tl = obj[\"timeLock\"];\r\n                self.ctx.$scope.ac = obj[\"accessControl\"];\r\n                self.ctx.$scope.ias = obj[\"ias\"];\r\n                self.ctx.$scope.gateway = obj[\"gateway\"];\r\n\r\n            } else {\r\n                self.ctx.$scope.noData = true;\r\n            }\r\n        } else {\r\n            self.ctx.$scope.noData = true;\r\n        }\r\n    }\r\n    self.ctx.detectChanges();\r\n}\r\n\r\nself.actionSources = function() {\r\n    return {\r\n        'elementClick': {\r\n            name: 'widget-action.element-click',\r\n            multiple: true\r\n        }\r\n    };\r\n}\r\n\r\nself.onResize = function() {\r\n}\r\n\r\nself.onDestroy = function() {\r\n}\r\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"User Table\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "c27a6aa0-6aa7-11ef-8345-c396246a79d7"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}