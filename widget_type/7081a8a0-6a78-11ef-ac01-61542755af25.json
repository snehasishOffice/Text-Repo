{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "branch_table",
    "name" : "Branch Table",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div style=\"width:100%;height:100%;\" *ngIf=\"getObjectKeys\">\n    <div class=\"headerBlock\">\n        <span class=\"headerSpan\" *ngFor=\"let key of getObjectKeys()\">{{key}}</span>\n        <span class=\"headerSpan\" style=\"width:80px\">Notification Settings</span>\n        <span class=\"headerSpan\" style=\"width:80px\"></span>\n    </div> \n    <div class=\"alarmsBlock\"> \n        <div *ngFor=\"let item of tenants\" class=\"rowBlock\" style=\"border: 1px solid #E6E6E6\">\n            <div *ngFor=\"let key of getObjectKeys()\" class=\"row\">\n                <span *ngIf=\"key == 'Name'\" class=\"name\">{{item[key]}}</span>\n                <span *ngIf=\"key == 'IFSC code'\" class=\"default\">{{item[key]}}</span>\n                <span *ngIf=\"key != 'Name' && key != 'IFSC code'\">\n                    <span *ngIf=\"item[key] == 'Online'\" class=\"on\">Online</span>\n                    <span *ngIf=\"item[key] == 'Fault'\" class=\"faulty\">Fault</span>\n                    <span *ngIf=\"item[key] == 'Inactive' || item[key] == 'Offline'\" class=\"unavailable\">Offline</span>\n                    <span *ngIf=\"item[key] == 'N/A'\" class=\"na\">N/A</span>\n                </span>\n            </div>\n            <span class=\"icons\">\n                <mat-icon (click)=\"branchNotification(item)\" [matTooltipPosition]=\"'above'\" matTooltip=\"Notification\">notifications_outline</mat-icon>\n            </span>\n            <span class=\"icons\">\n                <svg [matTooltipPosition]=\"'above'\" matTooltip=\"Branch Dasboard\" style=\"cursor: pointer;\" (click)=\"selectTenant(item)\" width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M4.5136 21.4864C2.248 19.2208 1 16.2064 1 13C1 9.7936 2.248 6.7792 4.5136 4.5136C6.7792 2.248 9.7936 1 13 1C16.2064 1 19.2208 2.248 21.4864 4.5136C23.752 6.7792 25 9.7936 25 13C25 16.2064 23.752 19.2208 21.4864 21.4864C19.2208 23.752 16.2064 25 13 25C9.7936 25 6.7792 23.752 4.5136 21.4864ZM1.48 13C1.48 19.3504 6.6496 24.52 13 24.52C19.3504 24.52 24.52 19.3504 24.52 13C24.52 6.6496 19.3504 1.48 13 1.48C6.6496 1.48 1.48 6.6496 1.48 13Z\" fill=\"#8790A2\" stroke=\"#8790A2\" stroke-miterlimit=\"10\"/>\n                <path d=\"M7.43203 13.7344L16.6816 13.744L14.9248 15.4912C14.6368 15.7792 14.6368 16.24 14.9248 16.528C15.2128 16.816 15.6832 16.816 15.9712 16.528L18.9808 13.5184C19.2688 13.2304 19.2688 12.7696 18.9808 12.4816L15.9712 9.47201C15.6832 9.18401 15.2128 9.18401 14.9248 9.47201C14.6368 9.76001 14.6368 10.2208 14.9248 10.5088L16.6816 12.2656L7.43203 12.2608C7.02883 12.2608 6.69763 12.592 6.69763 12.9952C6.69763 13.3984 7.03363 13.7296 7.43203 13.7344Z\" fill=\"#8790A2\"/>\n                </svg>\n            </span>\n        </div>\n    </div>\n</div>",
      "templateCss" : ".headerBlock {\n    display: flex;\n    background-color: #fff;\n    border-radius: 6px;\n    border: 1px solid #E6E6E6;\n    justify-content: space-between;\n    color: #9FA6B4;\n    height: 10%;\n}\n\n.alarmsBlock {\n    height: 80%;\n    overflow: auto;\n}\n\n.headerSpan {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 600;\n    width: 15%;\n    padding: 15px;\n    display: flex;\n    align-items: center;\n}\n\n.rowBlock {\n    background-color: #fff;\n    border-radius: 6px;\n    padding: 5px;\n    margin-top: 5px;\n    display: flex;\n    width: 100%;\n    color: #9FA6B4;\n    justify-content: space-between;\n}\n\n.row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 15%;\n}\n\n.row span {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-width: 50px;\n}\n\n.id{\n    background-color: #31446A;\n    color: #FEFEFE;\n    border-radius: 20px;\n    padding: 10px;\n    text-align: center;\n}\n\n.default {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    color: #6A717D;\n    padding: 15px;\n}\n\n.name {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    color: #6A717D;\n    padding: 10px;\n    background-color: #F0F1F2;\n    border-radius: 20px;\n}\n\n.on {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 10px;\n    background-color: #F4FFF9;\n    border-radius: 20px;\n    border: 1px solid #2C7D43;\n    color: #2C7D43;\n}\n\n.faulty {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 10px;\n    background-color: #FFF9F4;\n    border-radius: 20px;\n    border: 1px solid #AD7117;\n    color: #AD7117;\n}\n\n.unavailable {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 10px;\n    background-color: #FFEBEE;\n    border-radius: 20px;\n    border: 1px solid #D32F2F;\n    color: #D32F2F;\n}\n\n.na {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 10px;\n    background-color: #F9F9F9;\n    border-radius: 20px;\n    border: 1px solid #818181;\n    color: #818181; \n}\n\n\n\n.icons {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    width: 80px;\n}\n\n.icons mat-icon {\n    cursor: pointer;\n}",
      "controllerScript" : "self.onInit = function() {\n   self.ctx.$scope.tenants = [{\n        id: '123',\n        name: \"Tenant 01\", \n        q_limit: 'MINOR',\n        q_used: 3,\n        exp_date: 17,\n        email: 'pinkevycdima@gmail.com'\n    }, {\n        id: '123',\n        name: \"Tenant 02\", \n        q_limit: 'MINOR',\n        q_used: 3,\n        exp_date: 17,\n        email: 'pinkevycdima@gmail.com'\n    }];\n    \n    self.ctx.$scope.getObjectKeys = function() {\n        let array = [];\n        Object.keys(self.ctx.$scope.tenants[0]).forEach(x=>{\n            if(x!='id'){\n                array.push(x);\n            }\n        })\n        return array;\n    }\n    \n    self.ctx.$scope.selectTenant = function(item){\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\n        let actionEvent;\n            \n        if (actionEventDescriptors.length) {\t\n            actionEventDescriptors.forEach(action=>{\n                if(action.name == 'Select'){\n                    actionEvent = action;\n                }\n            });\n                \n            setTimeout(() => {\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, item.id, item.Name);\t\n            }, 0);\t\n        }\n    }\n    \n    self.ctx.$scope.branchNotification = function(item){\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\n        let actionEvent;\n            \n        if (actionEventDescriptors.length) {\t\n            actionEventDescriptors.forEach(action=>{\n                if(action.name == 'Notification'){\n                    actionEvent = action;\n                }\n            });\n                \n            setTimeout(() => {\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, item.id, item.Name);\t\n            }, 0);\t\n        }\n    }\n}\n\nself.onDataUpdated = function() {\n    if(self.ctx.datasources[0].type != 'function'){\n        self.ctx.$scope.tenants = [];\n        \n        self.ctx.datasources.forEach(x=>{\n            let obj = {};\n            obj['id'] = x.entity.id;\n    \n            self.ctx.data.forEach(y => {\n                if(y.datasource.entityId == x.entityId){\n                    if(y.data[0]){\n                        obj[y.dataKey.label] = y.data[0][1];\n                    }\n                } \n            })\n            self.ctx.$scope.tenants.push(obj);\n        })\n    }\n}\n\nself.onResize = function() {\n  \n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Branch Table\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7081a8a0-6a78-11ef-ac01-61542755af25"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}