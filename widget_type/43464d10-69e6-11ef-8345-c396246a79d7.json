{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "count_device_widget",
    "name" : "count device widget",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div style=\"width:100%;height:100%;overflow: auto; padding: 5px\">\n    <div class=\"alarmsBlock\"> \n        <div *ngFor=\"let item of stats\" class=\"rowBlock\">\n            <div class=\"row\">\n                <div style=\"width: 20%\">\n                    <span class=\"name\">{{item.name}}</span>\n                </div>\n                <div class=\"card\">\n                    <span class=\"header\" style=\"background-color:#4E90CC\">Total System</span>\n                    <span class=\"footer\">{{item.totalSystem}}</span>\n                </div>\n                <div class=\"card\" (click)=\"click('Healthy', item.name)\">\n                    <span class=\"header\" style=\"background-color:#59B272\">Healthy Devices</span>\n                    <span class=\"footer\">{{item.healthyDevices}}</span>\n                </div>\n                <div class=\"card\" (click)=\"click('Faulty', item.name)\">\n                    <span class=\"header\" style=\"background-color:#E0AA59\">Faulty Devices</span>\n                    <span class=\"footer\">{{item.faultyDevices}}</span>\n                </div>\n                <div class=\"card\" (click)=\"click('In active', item.name)\">\n                    <span class=\"header\" style=\"background-color:#737272\">Inactive Devices</span>\n                    <span class=\"footer\">{{item.inactiveDevices}}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
      "templateCss" : ".headerBlock {\n    display: flex;\n    background-color: #fff;\n    border-radius: 6px;\n    border: 1px solid #E6E6E6;\n    display: flex;\n    justify-content: space-between;\n    color: #9FA6B4;\n}\n\n.rowBlock {\n    background-color: #fff;\n    border-radius: 6px;\n    padding: 10px;\n    margin-top: 10px;\n    display: flex;\n    width: 100%;\n    color: #9FA6B4;\n    justify-content: space-between;\n}\n\n.row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n}\n\n.name {\n    font-family: Roboto;\n    font-size: 14px;\n    font-weight: 500;\n    color: #6A717D;\n    padding: 10px;\n    background-color: #F0F1F2;\n    border-radius: 20px;\n    width: 18%;\n}\n\n.card {\n    display: flex;\n    flex-direction: column;\n    width: 18%;\n    border-radius: 6px;\n    cursor: pointer;\n}\n\n.header {\n    padding: 15px;\n    color: white;\n    border-radius: 6px 6px 0px 0px;\n    text-align: center;\n}\n\n.footer{\n    padding: 15px;\n    background-color: #F7F9F9;\n    border: 1px solid #CFD8DC;\n    color: #000000;\n    border-radius: 0px 0px 6px 6px;\n    font-size: 18px;\n    font-weight: 700;\n    text-align: center;\n}\n",
      "controllerScript" : "self.onInit = function() {\n    self.ctx.$scope.stats = [{\n        name: 'Gateway',\n        totalSystem: 0,\n        healthyDevices: 0,\n        faultyDevices: 0,\n        inactiveDevices: 0\n    }, {\n        name: \"CCTV\", \n        totalSystem: 0,\n        healthyDevices: 0,\n        faultyDevices: 0,\n        inactiveDevices: 0\n    }, {\n        name: 'Intrusion alarm', \n        totalSystem: 0,\n        healthyDevices: 0,\n        faultyDevices: 0,\n        inactiveDevices: 0\n    }, {\n        name: 'Fire alarm', \n        totalSystem: 0,\n        healthyDevices: 0,\n        faultyDevices: 0,\n        inactiveDevices: 0\n    }, {\n        name: 'Time lock', \n        totalSystem: 0,\n        healthyDevices: 0,\n        faultyDevices: 0,\n        inactiveDevices: 0\n    }, {\n        name: 'Access control', \n        totalSystem: 0,\n        healthyDevices: 0,\n        faultyDevices: 0,\n        inactiveDevices: 0\n    }, {\n        name: 'Integrated System',\n        totalSystem: 0,\n        healthyDevices: 0,\n        faultyDevices: 0,\n        inactiveDevices: 0\n    }];\n    self.ctx.$scope.info = {\n        log_type_power_off: false // Add a new variable to handle power_off status\n    };\n    \n    self.ctx.$scope.getObjectKeys = function() {\n        let array = [];\n        Object.keys(self.ctx.$scope.tenants[0]).forEach(x=>{\n            if(x!='id'){\n                array.push(x);\n            }\n        })\n        return array;\n    }\n    \n    self.ctx.$scope.click = function(item, type){\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\n        let actionEvent;\n            \n        if (actionEventDescriptors.length) {\t\n            actionEventDescriptors.forEach(action=>{\n                if(action.name == type + ' ' + item){\n                    actionEvent = action;\n                }\n            });\n                \n            setTimeout(() => {\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, null, null);\t\n            }, 0);\t\n        }\n    }\n}\n\nself.onDataUpdated = function() {\n    if (self.ctx.datasources[0].type !== 'function') {\n        resetPropertiesToZero(self.ctx.$scope.stats);\n\n        try {\n            if (self.ctx.data[0].data[0]) {\n                let obj = JSON.parse(self.ctx.data[0].data[0][1]);\n\n                // Initialize log_type_power_off to false\n                obj.log_type_power_off = false;\n\n                // Check for the telemetry key 'log_type' with value 'power_off'\n                if (self.ctx.data[1] && self.ctx.data[1].data[0]) {\n                    let logTypeData = self.ctx.data[1].data[0][1];\n                    if (logTypeData === 'power_off') {\n                        obj.log_type_power_off = true;\n                    } else if (logTypeData === 'NA') {\n                        obj.log_type_power_off = false;\n                    }\n                }\n\n                // Merge the new info with the existing scope info\n                self.ctx.$scope.info = { ...self.ctx.$scope.info, ...obj };\n                console.log(self.ctx.$scope.info);\n            }\n        } catch (error) {\n            // Handle errors (e.g., JSON parsing errors or empty JSON)\n            console.error('Error parsing JSON or processing data:', error);\n        }\n\n        self.ctx.data.forEach(x => {\n            if (x.dataKey.name === 'gateway') {\n                calculate('gateway', x.data[0][1]);\n            } else if (x.dataKey.name === 'cctv') {\n                calculate('cctv', x.data[0][1]);\n            } else if (x.dataKey.name === 'fas') {\n                calculate('fas', x.data[0][1]);\n            } else if (x.dataKey.name === 'bas') {\n                calculate('bas', x.data[0][1]);\n            } else if (x.dataKey.name === 'timeLock') {\n                calculate('timeLock', x.data[0][1]);\n            } else if (x.dataKey.name === 'accessControl') {\n                calculate('accessControl', x.data[0][1]);\n            } else if (x.dataKey.name === 'ias') {\n                calculate('ias', x.data[0][1]);\n            }\n        });\n    }\n};\n\n\nfunction calculate(type, value){\n    if(type == 'gateway'){\n        self.ctx.$scope.stats[0].totalSystem = self.ctx.$scope.stats[0].healthyDevices + self.ctx.$scope.stats[0].faultyDevices;\n        if(value == 'Online'){\n            self.ctx.$scope.stats[0].healthyDevices++;\n        } else if(value == 'Fault'){\n            self.ctx.$scope.stats[0].faultyDevices++;\n        } else if(value == 'N/A' || value == 'Offline') {\n            self.ctx.$scope.stats[0].inactiveDevices++;\n        }\n    }\n    else if(type == 'cctv'){\n        self.ctx.$scope.stats[1].totalSystem = self.ctx.$scope.stats[1].healthyDevices + self.ctx.$scope.stats[1].faultyDevices;\n        if(value == 'Online'){\n            self.ctx.$scope.stats[1].healthyDevices++;\n        } else if(value == 'Fault'){\n            self.ctx.$scope.stats[1].faultyDevices++;\n        } else if(value == 'N/A' || value == 'Offline'){\n            self.ctx.$scope.stats[1].inactiveDevices++;\n        }\n    } else if(type == 'bas'){\n        self.ctx.$scope.stats[2].totalSystem = self.ctx.$scope.stats[2].healthyDevices + self.ctx.$scope.stats[2].faultyDevices;\n        if(value == 'Online'){\n            self.ctx.$scope.stats[2].healthyDevices++;\n        } else if(value == 'Fault'){\n            self.ctx.$scope.stats[2].faultyDevices++;\n        } else if(value == 'N/A' || value == 'Offline') {\n            self.ctx.$scope.stats[2].inactiveDevices++;\n        }\n    } else if(type == 'fas'){\n        self.ctx.$scope.stats[3].totalSystem = self.ctx.$scope.stats[3].healthyDevices + self.ctx.$scope.stats[3].faultyDevices;\n        if(value == 'Online'){\n            self.ctx.$scope.stats[3].healthyDevices++;\n        } else if(value == 'Fault'){\n            self.ctx.$scope.stats[3].faultyDevices++;\n        } else if(value == 'N/A' || value == 'Offline') {\n            self.ctx.$scope.stats[3].inactiveDevices++;\n        }\n    } else if(type == 'timeLock'){\n        self.ctx.$scope.stats[4].totalSystem = self.ctx.$scope.stats[4].healthyDevices + self.ctx.$scope.stats[4].faultyDevices;\n        if(value == 'Online'){\n            self.ctx.$scope.stats[4].healthyDevices++;\n        } else if(value == 'Fault'){\n            self.ctx.$scope.stats[4].faultyDevices++;\n        } else if(value == 'N/A' || value == 'Offline') {\n            self.ctx.$scope.stats[4].inactiveDevices++;\n        }\n    } else if(type == 'accessControl'){\n        self.ctx.$scope.stats[5].totalSystem = self.ctx.$scope.stats[5].healthyDevices + self.ctx.$scope.stats[5].faultyDevices;\n        if(value == 'Online'){\n            self.ctx.$scope.stats[5].healthyDevices++;\n        } else if(value == 'Fault'){\n            self.ctx.$scope.stats[5].faultyDevices++;\n        } else if(value == 'N/A' || value == 'Offline') {\n            self.ctx.$scope.stats[5].inactiveDevices++;\n        }\n    } if(type == 'ias'){\n        self.ctx.$scope.stats[6].totalSystem++;\n        if(value == 'Online'){\n            self.ctx.$scope.stats[6].healthyDevices++;\n        } else if(value == 'Fault'){\n            self.ctx.$scope.stats[6].faultyDevices++;\n        } else if(value == 'N/A' || value == 'Offline') {\n            self.ctx.$scope.stats[6].inactiveDevices++;\n        }\n    }\n}\n\nfunction resetPropertiesToZero(array) {\n    array.forEach(obj => {\n        for (let key in obj) {\n            if (key !== 'name') {\n                obj[key] = 0;\n            }\n        }\n    });\n}\n\n\nself.onResize = function() {\n  \n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"count device widget\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "43464d10-69e6-11ef-8345-c396246a79d7"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}