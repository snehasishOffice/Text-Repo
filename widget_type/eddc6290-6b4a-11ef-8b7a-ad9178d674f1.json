{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "system_status_widget",
    "name" : "system status widget",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div style=\"width:100%;height:100%;overflow: auto;\" *ngIf=\"info\">\r\n    <div class=\"rowBlock\">\r\n        <div class=\"row\">\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{'background-color': info.statusbox_system_on ? '#59B272' : '#737272'}\">Power Status</span>\r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_system_on\">Off</span>                \r\n                <span class=\"footer\" *ngIf=\"info.statusbox_system_on\">On</span>\r\n            </div>\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{'background-color': info.statusbox_mains_on ? '#E55D5D' : '#E0AA59'}\">Power Supply</span>\r\n                <span class=\"footer\" *ngIf=\"info.statusbox_mains_on || info.mains_on\">Mains</span>                \r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_mains_on || !info.mains_on\">Battery Backup</span>\r\n            </div>\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{\r\n              'background-color': (info.statusbox_battery_low && info.statusbox_battery_reverse) || (info.statusbox_battery_reverse && !info.statusbox_battery_low && info.log_type_power_off) || (info.statusbox_battery_low && !info.statusbox_battery_reverse && info.log_type_power_off) ? '#E0AA59' :\r\n                                (info.statusbox_battery_reverse || info.log_type_power_off) ? '#E55D5D' : \r\n                                 '#59B272'\r\n          }\">Battery Status</span>\r\n                \r\n                <span class=\"footer\" *ngIf=\"info.statusbox_battery_low && info.statusbox_battery_reverse\">Low & Reverse</span>\r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_battery_low && info.statusbox_battery_reverse\">Reverse</span>\r\n                <span class=\"footer\" *ngIf=\"info.statusbox_battery_low && !info.statusbox_battery_reverse\">Low</span>\r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_battery_reverse && !info.statusbox_battery_low\">OK</span>\r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_battery_low && info.statusbox_battery_reverse && info.log_type_power_off\">Low</span>\r\n            </div>\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{'background-color': info.statusbox_mains_on ? '#59B272' : '#737272'}\">System Status</span>\r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_system_healthy\">Faulty</span>                \r\n                <span class=\"footer\" *ngIf=\"info.statusbox_system_healthy\">Healthy</span>\r\n            </div>\r\n        </div>\r\n        \r\n        <div class=\"row\">\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{'background-color': info.statusbox_network ? '#59B272' : '#737272'}\">Network</span>\r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_network\">Off</span>                \r\n                <span class=\"footer\" *ngIf=\"info.statusbox_network\">On</span>\r\n            </div>\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{'background-color': info.statusbox_network ? '#59B272' : '#737272'}\">Network Operator</span>\r\n                <span class=\"footer\">{{info.statusbox_network}}</span>\r\n            </div>\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{'background-color': info.statusbox_system_healthy ? '#5E74E6' : '#737272'}\">SOS Status</span>\r\n                <span class=\"footer\" *ngIf=\"!info.statusbox_sos_status\">Inactive</span>                \r\n                <span class=\"footer\" *ngIf=\"info.statusbox_sos_status\">Active</span>\r\n            </div>\r\n            <div class=\"card\">\r\n                <span class=\"header\" [ngStyle]=\"{'background-color': info.statusbox_no_of_connected_device ? '#59B272' : '#737272'}\">Devices Connected</span>\r\n                <span class=\"footer\">{{info.statusbox_no_of_connected_device}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
      "templateCss" : ".headerBlock {\r\n    display: flex;\r\n    background-color: #fff;\r\n    border-radius: 6px;\r\n    border: 1px solid #E6E6E6;\r\n    justify-content: space-between;\r\n    color: #9FA6B4;\r\n}\r\n\r\n.rowBlock {\r\n    background-color: #fff;\r\n    border-radius: 6px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    color: #9FA6B4;\r\n    height: 100%;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%;\r\n}\r\n\r\n.card {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 23%;\r\n    border-radius: 6px;\r\n}\r\n\r\n.header {\r\n    padding: 15px;\r\n    color: white;\r\n    border-radius: 6px 6px 0px 0px;\r\n    text-align: center;\r\n}\r\n\r\n.footer {\r\n    padding: 15px;\r\n    background-color: #F7F9F9;\r\n    border: 1px solid #CFD8DC;\r\n    color: #000000;\r\n    border-radius: 0px 0px 6px 6px;\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    text-align:center;\r\n}\r\n",
      "controllerScript" : "self.onInit = function() {\r\n    self.ctx.$scope.info = {\r\n        statusbox_system_on: true, \r\n        statusbox_battery_on: true,\r\n        statusbox_battery_reverse: false,\r\n        statusbox_network: \"Jio\",\r\n        statusbox_mains_on: false,\r\n        statusbox_battery_low: false,\r\n        statusbox_system_healthy: false,\r\n        statusbox_sos_status: false,\r\n        statusbox_no_of_connected_device: 8,\r\n        log_type_power_off: false, // Add a new variable to handle power_off status\r\n        mains_on:true,\r\n        battery_on:false,\r\n        battery_low:false,\r\n        battery_reverse:false\r\n    };\r\n    \r\n    self.ctx.$scope.selectTenant = function(item) {\r\n        let params = self.ctx.$scope.ctx.stateController.getStateParams();\r\n        let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\r\n        let actionEvent;\r\n            \r\n        if (actionEventDescriptors.length) {    \r\n            actionEventDescriptors.forEach(action => {\r\n                if (action.name === 'Select') {\r\n                    actionEvent = action;\r\n                }\r\n            });\r\n                \r\n            setTimeout(() => {\r\n                self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, item.id, item['Tenant Name']);    \r\n            }, 0);    \r\n        }\r\n    };\r\n};\r\n\r\nself.onDataUpdated = function() {\r\n    if (self.ctx.datasources[0].type !== 'function') {\r\n        if (self.ctx.data[0].data[0]) {\r\n            let obj = JSON.parse(self.ctx.data[0].data[0][1]);\r\n\r\n            // Initialize log_type_power_off to false\r\n            obj.log_type_power_off = false;\r\n            let logTypeData = self.ctx.data[1].data[0][1];\r\n            // Check for the telemetry key 'log_type' with value 'power_off'\r\n            if (self.ctx.data[1] && self.ctx.data[1].data[0]) {\r\n                // let logTypeData = self.ctx.data[1].data[0][1];\r\n                if (logTypeData === 'power_off') {\r\n                    obj.statusbox_system_on = false;\r\n                    obj.log_type_power_off = true;\r\n                } else if(logTypeData === 'NA') {\r\n                    obj.log_type_power_off = false;\r\n                }\r\n            }\r\n            if(logTypeData === 'mains_on') {\r\n                    obj.statusbox_mains_on = true;\r\n                    obj.mains_on = true;\r\n                } else if(logTypeData === 'battery_on') {\r\n                    obj.statusbox_mains_on = false;\r\n                    obj.mains_on = false;\r\n                }\r\n            // if(logTypeData === 'battery_reverse') {\r\n            //     obj.statusbox_battery_reverse = true;\r\n            //     obj.statusbox_battery_low = false;\r\n            // } else if(logTypeData === 'battery_low') {\r\n            //     obj.statusbox_battery_low = true;\r\n            //     obj.statusbox_battery_reverse = false;\r\n            // }\r\n\r\n            // Update the info object\r\n            self.ctx.$scope.info = { ...self.ctx.$scope.info, ...obj };\r\n            console.log(self.ctx.$scope.info);\r\n        }\r\n    }\r\n};\r\n\r\nself.onResize = function() {\r\n    // No changes needed for resize functionality\r\n};\r\n\r\nself.actionSources = function() {\r\n    return {\r\n        'elementClick': {\r\n            name: 'widget-action.element-click',\r\n            multiple: true\r\n        }\r\n    };\r\n};\r\n\r\nself.onDestroy = function() {\r\n    // No changes needed for destroy functionality\r\n};\r\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"system status widget\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "eddc6290-6b4a-11ef-8b7a-ad9178d674f1"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}